{"version":3,"sources":["components/images/brickwall.jpg","components/canvas.js","components/images/sprayblackbottle.png","App.js","reportWebVitals.js","index.js"],"names":["Canvas","props","draw","rest","canvasRef","useRef","useState","isPainting","setIsPainting","x","y","mousePosition","setMousePosition","paintColor","setPaintColor","reticleSize","setReticleSize","backgroundImg","Image","src","brickwall","startPaint","useCallback","event","coordinates","getCoordinates","current","clientX","offsetLeft","pageY","offsetTop","paint","newMousePosition","drawLine","originalMousePosition","context","getContext","strokeStyle","lineCap","lineJoin","lineWidth","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","beginPath","moveTo","lineTo","closePath","stroke","exitPaint","useEffect","onload","drawImage","size","width","height","addEventListener","removeEventListener","handleColorSelection","evt","target","value","handleSprayWidth","Fragment","className","id","ref","style","border","marginTop","onClick","type","name","savedImage","toDataURL","replace","window","location","href","class","clearRect","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94a89a90.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/brickwall.1b8f98a9.jpg\";","import React, { useRef, useEffect, useState, useCallback } from 'react';\n//import './App.css';\nimport brickwall from \"./images/brickwall.jpg\"\nimport spraybottle from \"./images/sprayblackbottle.png\"\n\nconst Canvas = props => {\n\n    const Coordinate = {\n      x: 0,\n      y: 0,\n    }\n  \n    const { draw, ...rest } = props;\n    const canvasRef = useRef(null);\n    const [isPainting, setIsPainting] = useState(false);\n    const [mousePosition, setMousePosition] = useState(Coordinate);  \n    const [paintColor, setPaintColor] = useState('blue')\n    const [reticleSize, setReticleSize] = useState('10')\n  \n    const backgroundImg = new Image() //Create new img element\n    backgroundImg.src = brickwall; //Set source path\n    \n  \n    const startPaint = useCallback ((event) => {\n      const coordinates = getCoordinates(event);\n      if (coordinates) {\n        setIsPainting(true);\n        setMousePosition(coordinates);\n      }\n    }, []);\n  \n    const getCoordinates = (event) => {\n      if (!canvasRef.current) {\n        return \n      };\n      return {x: event.clientX - canvasRef.current.offsetLeft, y:event.pageY - canvasRef.current.offsetTop};\n    }\n  \n    const paint = useCallback ((event) => {\n      if (isPainting) {\n        const newMousePosition = getCoordinates(event);\n        if (mousePosition && newMousePosition) {\n          drawLine(mousePosition, newMousePosition);\n          setMousePosition(newMousePosition);\n        }\n      }\n    }, [isPainting, mousePosition]);\n  \n    const drawLine = (originalMousePosition, newMousePosition) => {\n      if (!canvasRef.current) {\n        return\n      };\n      const context = canvasRef.current.getContext(\"2d\");\n      \n      if (context) {\n        context.strokeStyle = paintColor;\n        //console.log(\"paint color:\", paintColor)\n        //console.log(\"stroke style:\", context.strokeStyle)\n        context.lineCap = 'round';\n        context.lineJoin = 'round';\n        context.lineWidth = reticleSize;\n        context.shadowOffsetX = 5;\n        context.shadowOffsetY = 5;\n        context.shadowBlur = 15;\n        context.shadowColor = paintColor;\n  \n        context.beginPath();\n        context.moveTo(originalMousePosition.x, originalMousePosition.y);\n        context.lineTo(newMousePosition.x, newMousePosition.y);\n        context.closePath();\n        context.stroke();\n      }\n    }\n    const exitPaint = useCallback(() => {\n      setIsPainting(false);\n    }, []);\n  \n    //Load canvas 2D context/surface on the canvas element/node and background img\n    useEffect(() => {\n      if (!canvasRef.current) {\n        return\n      };\n      const context = canvasRef.current.getContext(\"2d\");\n      \n      backgroundImg.onload = () => {\n        context.drawImage(backgroundImg, 0, 0, props.size.width, props.size.height)\n      }; \n    },[]);  \n  \n    //Start drawing when mouse is pressed downward\n    //When event (mousedown) is on target (Canvas node), call function\n    useEffect(() => {\n      if (!canvasRef.current) {\n        return\n      };\n      canvasRef.current.addEventListener('mousedown', startPaint);\n      return () => {\n        canvasRef.current.removeEventListener('mousedown', startPaint);\n      }\n    }, [startPaint]);\n  \n    //Draw line on mouse move\n    useEffect(() => {\n      if (!canvasRef.current) {\n        return\n      };\n      canvasRef.current.addEventListener('mousemove', paint);\n      return () => {\n        canvasRef.current.removeEventListener('mousemove', paint);\n      }\n    }, [paint]);\n  \n    //Stop drawing on mouse release\n    useEffect(() => {\n      if (!canvasRef.current) {\n        return\n      };\n      canvasRef.current.addEventListener('mouseup', exitPaint);\n      canvasRef.current.addEventListener('mouseleave', exitPaint);\n      return () => {\n        canvasRef.current.removeEventListener('mouseup', exitPaint);\n        canvasRef.current.removeEventListener('mouseleave', exitPaint);\n      }\n    }, [exitPaint]);\n  \n    const handleColorSelection = (evt) => {\n      setPaintColor(evt.target.value);\n    };\n  \n    const handleSprayWidth = (evt) => {\n      setReticleSize(evt.target.value);\n    };\n  \n  \n  \n    const handleSaveDrawing = () => {\n      //const canvasToSave = document.getElementById(\"mycanvas\")\n      //Convert image to 'octet-stream' (Just a download)\n      const savedImage = canvasRef.current.toDataURL(\"image/png\").replace(\"image/png\", \"image/octet-stream\");\n      window.location.href=savedImage;\n      //const savedImage = canvasRef.current.toDataURL();\n    //   const savedImageName = \"GraffitiWall\";\n    //   document.createElement(\"a\").href = savedImage;\n    //   document.createElement(\"a\").target = \"_blank\";\n    //   document.createElement(\"a\").download = savedImageName;\n    //   const evt = document.createEvent(\"MouseEvents\");\n    //   evt.initMouseEvent(\"click\", true, true, window, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n    //   document.createElement(\"a\").dispatchEvent(evt);\n      \n    };\n  \n    const handleClearDrawing = () => {\n      const context = canvasRef.current.getContext(\"2d\");\n      context.clearRect(0, 0, props.size.width, props.size.height);\n      context.drawImage(backgroundImg, 0, 0, props.size.width, props.size.height)\n    };\n  \n      return ( \n        <React.Fragment> \n        <div className=\"spray\">\n          <canvas \n            id=\"mycanvas\"\n            className=\"spray\"\n            ref={canvasRef} \n            width={props.size.width}\n            height={props.size.height}\n            // onmousedown={startPaint}\n            // onmouseup={exitPaint}\n            // onmouseleave={exitPaint}\n            // onmousemove={paint}\n            style={{\n              border: '2px solid #000',\n              marginTop: 10,\n              \n            }}\n  \n            {...rest}/>\n        </div>\n        <div id=\"paint-options-content\">\n            <div id=\"paint-color-options\">\n                <p className=\"spray\"> <button onClick={handleColorSelection} type=\"submit\" value=\"blue\" id=\"blue-button\" className=\"paint-sample\"></button>\n                <button onClick={handleColorSelection} type=\"submit\" value=\"red\" id=\"red-button\" className = \"paint-sample\"></button>\n                <button onClick={handleColorSelection} type=\"submit\" value=\"green\" id=\"green-button\" className=\"paint-sample\"></button>\n                <button onClick={handleColorSelection} type=\"submit\" value=\"yellow\" id=\"yellow-button\" className=\"paint-sample\"></button>\n                <input name=\"Color Picker\" type=\"color\" id=\"custom-color-button\" className=\"paint-sample\"/>\n                \n                </p>\n            </div>\n            <div id=\"save-clear-options\">\n                <button onClick={handleSaveDrawing} type=\"submit\" value=\"true\" className=\"sq-button\"><i class=\"far fa-save\"></i></button>\n                <button onClick={handleClearDrawing} type=\"submit\" value=\"true\" className=\"sq-button\"><i class=\"fas fa-trash-alt\"></i></button>\n            \n            </div>\n            \n            <div id=\"spray-width-options\">\n                <button onClick={handleSprayWidth} type=\"submit\" value=\"10\" id=\"small-spray\" className=\"spraybottle\" ></button>\n                <button onClick={handleSprayWidth} type=\"submit\" value=\"20\" id=\"medium-spray\" className=\"spraybottle\" ></button>\n                <button onClick={handleSprayWidth} type=\"submit\" value=\"35\" id=\"large-spray\" className=\"spraybottle\" ></button>                    \n            </div>\n            \n        </div>\n        </React.Fragment>\n      )\n    }\n\n// const SprayOptions = () => {\n//     return (\n//         <React.Fragment>\n//         <div className=\"spray\">\n//         <p className=\"spray\"> Spray paint color: <button onClick={handleColorSelection} type=\"submit\" value=\"blue\" id=\"blue-button\" className=\"paint-sample\"></button>\n//         <button onClick={handleColorSelection} type=\"submit\" value=\"red\" id=\"red-button\" className = \"paint-sample\"></button>\n//         <button onClick={handleColorSelection} type=\"submit\" value=\"green\" id=\"green-button\" className=\"paint-sample\"></button>\n//         <button onClick={handleColorSelection} type=\"submit\" value=\"yellow\" id=\"yellow-button\" className=\"paint-sample\"></button>\n//       </p>\n//       </div>\n//       <div>\n//         Spray width: <button onClick={handleSprayWidth} type=\"submit\" value=\"10\" id=\"small-spray\" className=\"spraybottle\" ></button>\n//         <button onClick={handleSprayWidth} type=\"submit\" value=\"20\" id=\"medium-spray\" className=\"spraybottle\" ></button>\n//         <button onClick={handleSprayWidth} type=\"submit\" value=\"35\" id=\"large-spray\" className=\"spraybottle\" ></button>\n        \n\n//       </div>\n//       <div>\n//         <button onClick={handleSaveDrawing} type=\"submit\" value=\"true\">Save painting</button>\n//         <button onClick={handleClearDrawing} type=\"submit\" value=\"true\">Start over</button>\n//       </div>\n//     </React.Fragment>\n//     )\n// }\n    export default Canvas","export default __webpack_public_path__ + \"static/media/sprayblackbottle.a9a58012.png\";","\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport './App.css';\nimport Canvas from \"./components/canvas\";\n\n\nfunction App() {\n  \n  const canvasSize = {width: 700, height: 500};\n  return (\n    <div className=\"App\">\n      <div id=\"header-div\"><h1>Graffiti Wall</h1></div>\n      <Canvas size={canvasSize}/>\n      {/* <SprayOptions /> */}\n    </div>\n  );\n}\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}